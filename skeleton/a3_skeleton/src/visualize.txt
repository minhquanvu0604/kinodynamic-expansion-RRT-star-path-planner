        // // // ----- TEST VISUAL ----//
        // visualization_msgs::Marker marker0;
        // // Set the frame ID and timestamp.  See the TF tutorials for information on these.
        // marker0.header.frame_id = "world";
        // marker0.header.stamp = ros::Time::now();

        // // Set the namespace and id for this marker.  This serves to create a unique ID
        // // Any marker sent with the same namespace and id will overwrite the old one
        // marker0.ns = "basic_shapes";
        // marker0.id = id++;

        // // Set the marker type.  Initially this is CUBE, and cycles between that and SPHERE, ARROW, and CYLINDER
        // marker0.type = shape;

        // // Set the marker action.  Options are ADD, DELETE, and new in ROS Indigo: 3 (DELETEALL)
        // marker0.action = visualization_msgs::Marker::ADD;

        // // Set the pose of the marker.  This is a full 6DOF pose relative to the frame/time specified in the header
        // marker0.pose.position.x = 0;
        // marker0.pose.position.y = 0;
        // marker0.pose.position.z = 0;
        // marker0.pose.orientation.x = 0.0;
        // marker0.pose.orientation.y = 0.0;
        // marker0.pose.orientation.z = 0.0;
        // marker0.pose.orientation.w = 1.0;

        // // Set the scale of the marker -- 1x1x1 here means 1m on a side
        // marker0.scale.x = 1.0;
        // marker0.scale.y = 1.0;
        // marker0.scale.z = 1.0;

        // // Set the color -- be sure to set alpha to something non-zero!
        // marker0.color.r = 0.0f;
        // marker0.color.g = 1.0f;
        // marker0.color.b = 0.0f;
        // marker0.color.a = 1.0;

        // marker0.lifetime = ros::Duration();

        // // Publish the marker
        // while (pubMarker_.getNumSubscribers() < 1)
        // {
        // if (!ros::ok())
        // {
        //     return;
        // }
        // ROS_WARN_ONCE("Please create a subscriber to the marker");
        // sleep(1);
        // }
        // visualization_msgs::MarkerArray array0;
        // array0.markers.push_back(marker0);
        // pubMarker_.publish(array0);
        // ROS_INFO_STREAM("MARKER");

        // // Cycle between different shapes
        // switch (shape)
        // {
        // case visualization_msgs::Marker::CUBE:
        //     shape = visualization_msgs::Marker::SPHERE;
        //     break;
        // case visualization_msgs::Marker::SPHERE:
        //     shape = visualization_msgs::Marker::ARROW;
        //     break;
        // case visualization_msgs::Marker::ARROW:
        //     shape = visualization_msgs::Marker::CYLINDER;
        //     break;
        // case visualization_msgs::Marker::CYLINDER:
        //     shape = visualization_msgs::Marker::CUBE;
        //     break;
        // }

        // ---------------------------------------------------//




        // --------------------LINE TO CONES-------------------------------//

        // visualization_msgs::MarkerArray array;

        // for (auto cone : cones){

        //     visualization_msgs::Marker marker;
            
        //     marker.header.frame_id = "world";
        //     marker.header.stamp = ros::Time::now();
        //     marker.ns = "rrt";
        //     marker.id = id++;
        //     marker.type = visualization_msgs::Marker::LINE_LIST;
        //     marker.action = visualization_msgs::Marker::ADD;
        //     marker.lifetime = ros::Duration(1);

        //     // Start point
        //     geometry_msgs::Point start;
        //     start.x = cone.x;
        //     start.y = cone.y;
        //     start.z = 0;  // or your node1.z if 3D
        //     marker.points.push_back(start);

        //     // End point
        //     geometry_msgs::Point end;
        //     end.x = pose.position.x;
        //     end.y = pose.position.y;
        //     end.z = 0;  // or your node2.z if 3D
        //     marker.points.push_back(end);

        //     marker.pose.orientation.x = 0.0;
        //     marker.pose.orientation.y = 0.0;
        //     marker.pose.orientation.z = 0.0;
        //     marker.pose.orientation.w = 1.0;

        //     // Scale (width of the line)
        //     marker.scale.x = 0.1;

        //     // Color (Green)
        //     marker.color.r = 0.0;
        //     marker.color.g = 1.0;
        //     marker.color.b = 0.0;
        //     marker.color.a = 1.0;  // Don't forget to set alpha

        //     array.markers.push_back(marker);
        // }
        // // Publish the marker
        // while (pubMarker_.getNumSubscribers() < 1)
        // {
        // if (!ros::ok())
        // {
        //     return;
        // }
        // ROS_WARN_ONCE("Please create a subscriber to the marker");
        // sleep(1);
        // }
        // std::cout << "Marker Array::: " << array.markers.size() << std::endl;
        // pubMarker_.publish(array);
        